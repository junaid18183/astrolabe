(function(e,r){typeof exports=="object"&&typeof module<"u"?r(require("@kinvolk/headlamp-plugin/lib"),require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib/K8s/crd"),require("@kinvolk/headlamp-plugin/lib/CommonComponents")):typeof define=="function"&&define.amd?define(["@kinvolk/headlamp-plugin/lib","react/jsx-runtime","@kinvolk/headlamp-plugin/lib/K8s/crd","@kinvolk/headlamp-plugin/lib/CommonComponents"],r):(e=typeof globalThis<"u"?globalThis:e||self,r(e.pluginLib,e.pluginLib.ReactJSX,e.pluginLib.Crd,e.pluginLib.CommonComponents))})(this,function(e,r,a,t){"use strict";const u=a.makeCustomResourceClass({apiInfo:[{group:"astrolabe.io",version:"v1"}],isNamespaced:!0,singularName:"Module",pluralName:"modules"});function d(){const[i,s]=u.useList();return s?r.jsxs("div",{children:["Error loading modules: ",s.message]}):i?r.jsx("div",{children:i.map((l,p)=>r.jsxs("div",{children:[r.jsxs("p",{children:["JSON Data: ",JSON.stringify(l.jsonData)]}),r.jsxs("p",{children:["Cluster Name: ",l._clusterName]})]},p))}):r.jsx(t.Loader,{})}const n="astrolabe",o="modules";e.registerSidebarEntry({parent:null,name:n,label:"Astrolabe",icon:"mdi:cow"}),e.registerSidebarEntry({parent:n,name:o,label:"Modules",url:"/astrolabe/modules"}),e.registerRoute({path:"/astrolabe/modules",sidebar:o,name:o,exact:!0,component:d}),console.log("Astrolabe Plugin registered.")});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
