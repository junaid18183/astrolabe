(function(i,e){typeof exports=="object"&&typeof module<"u"?e(require("@kinvolk/headlamp-plugin/lib"),require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib/K8s/crd"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("react-router-dom"),require("@mui/material")):typeof define=="function"&&define.amd?define(["@kinvolk/headlamp-plugin/lib","react/jsx-runtime","@kinvolk/headlamp-plugin/lib/K8s/crd","@kinvolk/headlamp-plugin/lib/CommonComponents","react-router-dom","@mui/material"],e):(i=typeof globalThis<"u"?globalThis:i||self,e(i.pluginLib,i.pluginLib.ReactJSX,i.pluginLib.Crd,i.pluginLib.CommonComponents,i.pluginLib.ReactRouter,i.pluginLib.MuiMaterial))})(this,function(i,e,N,s,k,c){"use strict";const A=N.makeCustomResourceClass({apiInfo:[{group:"astrolabe.io",version:"v1"}],isNamespaced:!0,singularName:"Module",pluralName:"modules"});function x(){const[p,v]=A.useList();return v?e.jsxs("div",{children:["Error loading modules: ",v.message]}):p?e.jsx("div",{children:p.map((n,u)=>{var d,t,f,y,T;const{spec:l={},status:a={},metadata:S={}}=n.jsonData||{};return e.jsxs("div",{className:"mb-4 p-4 border rounded shadow-sm",children:[e.jsxs("p",{children:[e.jsx("strong",{children:"Name:"})," ",n.getName()]}),e.jsxs("p",{children:[e.jsx("strong",{children:"Namespace:"})," ",n.getNamespace()]}),e.jsxs("p",{children:[e.jsx("strong",{children:"Source Type:"})," ",((d=l.source)==null?void 0:d.type)||"-"]}),e.jsxs("p",{children:[e.jsx("strong",{children:"Source URL:"})," ",((t=l.source)==null?void 0:t.url)||"-"]}),e.jsxs("p",{children:[e.jsx("strong",{children:"Source Path:"})," ",((f=l.source)==null?void 0:f.path)||"-"]}),e.jsxs("p",{children:[e.jsx("strong",{children:"Version:"})," ",((y=l.source)==null?void 0:y.version)||"-"]}),e.jsxs("p",{children:[e.jsx("strong",{children:"Description:"})," ",a.description||"-"]}),e.jsxs("p",{children:[e.jsx("strong",{children:"Last Synced:"})," ",a.lastSynced||"-"]}),e.jsxs("p",{children:[e.jsx("strong",{children:"Cluster Name:"})," ",n._clusterName]}),e.jsxs("div",{children:[e.jsx("strong",{children:"Providers:"}),e.jsx("ul",{children:(a.providers??[]).length>0?a.providers.map((r,o)=>e.jsxs("li",{children:[r.name," (",r.source||"-",") ",r.version?"@ "+r.version:""]},o)):e.jsx("li",{children:"-"})})]}),e.jsxs("div",{children:[e.jsx("strong",{children:"Inputs:"}),e.jsx("ul",{children:(a.inputs??[]).length>0?a.inputs.map((r,o)=>e.jsxs("li",{children:[r.name,": ",r.type,r.required?" (required)":"",r.sensitive?" (sensitive)":"",r.default!==void 0?" (default: "+r.default+")":""," ",r.description?"- "+r.description:""]},o)):e.jsx("li",{children:"-"})})]}),e.jsxs("div",{children:[e.jsx("strong",{children:"Outputs:"}),e.jsx("ul",{children:(a.outputs??[]).length>0?a.outputs.map((r,o)=>e.jsxs("li",{children:[r.name,": ",r.type,r.sensitive?" (sensitive)":"",r.description?" - "+r.description:""]},o)):e.jsx("li",{children:"-"})})]}),e.jsxs("div",{children:[e.jsx("strong",{children:"Resources:"}),e.jsx("ul",{children:(a.resources??[]).length>0?a.resources.map((r,o)=>e.jsxs("li",{children:[r.name,": ",r.type]},o)):e.jsx("li",{children:"-"})})]}),e.jsxs("div",{children:[e.jsx("strong",{children:"Submodules:"}),e.jsx("ul",{children:(a.submodules??[]).length>0?a.submodules.map((r,o)=>e.jsxs("li",{children:[r.name,": ",r.source]},o)):e.jsx("li",{children:"-"})})]}),e.jsxs("div",{children:[e.jsx("strong",{children:"Requirements:"}),e.jsx("ul",{children:a.requirements?e.jsxs(e.Fragment,{children:[e.jsxs("li",{children:["Terraform Version: ",((T=a.requirements.terraform)==null?void 0:T.required_version)||"-"]}),a.requirements.required_providers&&Object.entries(a.requirements.required_providers).map(([r,o],_)=>e.jsxs("li",{children:["Provider: ",r," - ",String(o)]},_))]}):e.jsx("li",{children:"-"})})]}),e.jsxs("div",{children:[e.jsx("strong",{children:"Conditions:"}),e.jsx("ul",{children:(a.conditions??[]).length>0?a.conditions.map((r,o)=>e.jsxs("li",{children:[r.type,": ",r.status," (",r.reason,")"," ",r.message?"- "+r.message:""]},o)):e.jsx("li",{children:"-"})})]})]},u)})}):e.jsx(s.Loader,{})}function q(){var d,t,f,y,T;const{namespace:p,name:v}=k.useParams(),[n,u]=A.useGet(v,p);if(u)return e.jsxs("div",{children:["Error loading module: ",u.message]});if(!n)return e.jsx(s.Loader,{});const{spec:l={},status:a={},metadata:S={}}=n.jsonData||{};return e.jsxs(c.Box,{sx:{bgcolor:r=>r.palette.mode==="dark"?"#18181b":"#f8fafc",borderRadius:2,p:2,boxShadow:1},children:[e.jsx(s.MainInfoSection,{resource:n,title:`Module: ${S.name}`,extraInfo:[{name:"Namespace",value:S.namespace||"-"},{name:"Source Type",value:((d=l.source)==null?void 0:d.type)||"-"},{name:"Source URL",value:((t=l.source)==null?void 0:t.url)||"-"},{name:"Source Path",value:((f=l.source)==null?void 0:f.path)||"-"},{name:"Version",value:((y=l.source)==null?void 0:y.version)||"-"},{name:"Description",value:a.description||"-"},{name:"Last Synced",value:a.lastSynced||"-"}]}),e.jsx(s.SectionBox,{title:"Providers",children:e.jsx(s.NameValueTable,{rows:Array.isArray(a.providers)&&a.providers.length>0?a.providers.map(r=>({name:r.name,value:`${r.source||"-"}${r.version?" @ "+r.version:""}`})):[{name:"No providers",value:"-"}]})}),e.jsx(s.SectionBox,{title:"Inputs",children:e.jsx(s.NameValueTable,{rows:Array.isArray(a.inputs)&&a.inputs.length>0?a.inputs.map(r=>({name:r.name,value:`${r.type}${r.required?" (required)":""}${r.sensitive?" (sensitive)":""}${r.default!==void 0?" (default: "+r.default+")":""}${r.description?" - "+r.description:""}`})):[{name:"No inputs",value:"-"}]})}),e.jsx(s.SectionBox,{title:"Outputs",children:e.jsx(s.NameValueTable,{rows:Array.isArray(a.outputs)&&a.outputs.length>0?a.outputs.map(r=>({name:r.name,value:`${r.type}${r.sensitive?" (sensitive)":""}${r.description?" - "+r.description:""}`})):[{name:"No outputs",value:"-"}]})}),e.jsx(s.SectionBox,{title:"Resources",children:e.jsx(s.NameValueTable,{rows:Array.isArray(a.resources)&&a.resources.length>0?a.resources.map(r=>({name:r.name,value:r.type})):[{name:"No resources",value:"-"}]})}),e.jsx(s.SectionBox,{title:"Submodules",children:e.jsx(s.NameValueTable,{rows:Array.isArray(a.submodules)&&a.submodules.length>0?a.submodules.map(r=>({name:r.name,value:r.source})):[{name:"No submodules",value:"-"}]})}),e.jsx(s.SectionBox,{title:"Requirements",children:e.jsx(s.NameValueTable,{rows:a.requirements?[{name:"Terraform Version",value:((T=a.requirements.terraform)==null?void 0:T.required_version)||"-"},...a.requirements.required_providers?Object.entries(a.requirements.required_providers).map(([r,o])=>({name:`Provider: ${r}`,value:String(o)})):[]]:[{name:"No requirements",value:"-"}]})}),e.jsx(s.SectionBox,{title:"Conditions",children:e.jsx(s.ConditionsTable,{resource:n.jsonData})})]})}const L=N.makeCustomResourceClass({apiInfo:[{group:"astrolabe.io",version:"v1"}],isNamespaced:!0,singularName:"Stack",pluralName:"stacks"});function V(){return e.jsx("div",{children:"Hello Headlamp Stacks!"})}function w(){const{namespace:p,name:v}=k.useParams(),[n,u]=L.useGet(v,p);if(u)return e.jsxs("div",{children:["Error loading stack: ",u.message]});if(!n)return e.jsx("div",{children:"Loading..."});const{spec:l={},status:a={},metadata:S={}}=n.jsonData||{};return e.jsxs(c.Box,{sx:{bgcolor:d=>d.palette.mode==="dark"?"#18181b":"#f8fafc",borderRadius:2,p:2,boxShadow:1},children:[e.jsx(s.MainInfoSection,{resource:n,title:`Stack: ${S.name}`,extraInfo:[{name:"Phase",value:a.phase||"-"},{name:"Status",value:a.status||"-"},{name:"Ready",value:a.ready!==void 0?String(a.ready):"-"},{name:"Summary",value:a.summary||"-"}]}),e.jsx(s.SectionBox,{title:"Backend Config",children:e.jsx(s.NameValueTable,{rows:l.backendConfig?[{name:"Type",value:l.backendConfig.type||"-"},{name:"Settings",value:JSON.stringify(l.backendConfig.settings)||"-"}]:[{name:"No backend config",value:"-"}]})}),e.jsx(s.SectionBox,{title:"Credential Reference",children:e.jsx(s.NameValueTable,{rows:l.credentialRef?[{name:"Name",value:l.credentialRef.name||"-"}]:[{name:"No credential reference",value:"-"}]})}),e.jsx(s.SectionBox,{title:"Modules",children:e.jsx(c.Box,{sx:{overflowX:"auto"},children:e.jsxs(c.Table,{children:[e.jsx(c.TableHead,{children:e.jsxs(c.TableRow,{children:[e.jsx(c.TableCell,{children:"Name"}),e.jsx(c.TableCell,{children:"Depends On"}),e.jsx(c.TableCell,{children:"Variables"})]})}),e.jsx(c.TableBody,{children:Array.isArray(l.modules)&&l.modules.length>0?l.modules.map((d,t)=>e.jsxs(c.TableRow,{children:[e.jsx(c.TableCell,{children:d.name}),e.jsx(c.TableCell,{children:Array.isArray(d.dependsOn)?d.dependsOn.join(", "):"-"}),e.jsx(c.TableCell,{children:d.variables?JSON.stringify(d.variables):"-"})]},t)):e.jsx(c.TableRow,{children:e.jsx(c.TableCell,{colSpan:3,children:"No modules"})})})]})})}),e.jsx(s.SectionBox,{title:"Outputs",children:e.jsx(s.NameValueTable,{rows:a.outputs?Object.entries(a.outputs).map(([d,t])=>({name:d,value:JSON.stringify(t)})):[{name:"No outputs",value:"-"}]})}),e.jsx(s.SectionBox,{title:"Resources",children:e.jsx(s.NameValueTable,{rows:Array.isArray(a.resources)&&a.resources.length>0?a.resources.map(d=>({name:d.name,value:"-"})):[{name:"No resources",value:"-"}]})}),e.jsx(s.SectionBox,{title:"Conditions",children:e.jsx(s.ConditionsTable,{resource:n.jsonData})})]})}const b="astrolabe",h="modules",B="module",g="stacks";i.registerSidebarEntry({parent:null,name:b,label:"Astrolabe",icon:"mdi:cow",url:"/astrolabe"}),i.registerSidebarEntry({parent:b,name:h,label:"Modules",url:"/astrolabe/modules"}),i.registerSidebarEntry({parent:b,name:g,label:"Stacks",url:"/astrolabe/stacks"}),i.registerRoute({path:"/astrolabe/stacks",sidebar:g,name:g,exact:!0,component:V}),i.registerRoute({path:"/astrolabe/stacks/:namespace/:name",sidebar:g,parent:b,name:g,exact:!0,component:w}),i.registerRoute({path:"/astrolabe",sidebar:h,name:h,exact:!0,component:O}),i.registerRoute({path:"/astrolabe/modules",sidebar:h,name:h,exact:!0,component:x}),i.registerRoute({path:"/astrolabe/modules/:namespace/:name",sidebar:h,parent:b,name:B,exact:!0,component:q});function O(){return"Hello Astrolabe!"}console.log("Astrolabe Plugin registered.")});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
