# Product Requirements Document: Secret-based Authentication for Module Operator

## Overview
Enhance the Astrolabe Module Operator to support secure authentication for all module source types using Kubernetes Secrets. Add support for new source types (Bucket and OCIRepository) in addition to existing types (git, http). All credentials must be referenced via Kubernetes Secrets, never embedded in URLs or specs.

## Goals
- Support fetching modules from the following source types:
  - git (public/private)
  - http(s) (public/private)
  - bucket (S3, GCS, Azure Blob)
  - ociRepository (OCI-compliant registries)
- Use Kubernetes Secrets for all authentication (SSH keys, tokens, cloud provider keys, etc.).
- Reference secrets in the Module spec for each source type.
- Update controller logic to use secrets when fetching sources.
- Document secret reference patterns in CRD and sample YAMLs.
- Ensure no credentials are ever embedded in URLs/specs.

## Requirements
1. **Module Spec Changes**
   - Add support for `bucket` and `ociRepository` source types.
   - Add a `secretRef` field under `source` for referencing a Kubernetes Secret.
   - Example:
     ```yaml
     spec:
       source:
         type: git
         url: https://github.com/org/repo.git
         version: v1.0.0
         secretRef: my-git-secret
     ```
     ```yaml
     spec:
       source:
         type: bucket
         provider: aws
         bucket: my-bucket
         path: modules/vpc
         secretRef: my-s3-secret
     ```
     ```yaml
     spec:
       source:
         type: ociRepository
         image: ghcr.io/org/module:v1.0.0
         secretRef: my-oci-secret
     ```

2. **Controller Logic**
   - When reconciling a Module, detect the source type and fetch credentials from the referenced Secret.
   - Use credentials for authentication when fetching the source (git, http, bucket, oci).
   - Handle all supported secret types (SSH keys, basic auth, cloud provider keys, registry tokens, etc.).
   - Ensure secrets are never logged or exposed.

3. **Artifact Management**
   - Store fetched module content in a local artifact directory.
   - Update Module status with artifact info and observed revision.

4. **Documentation**
   - Update CRD and sample YAMLs to show secretRef usage for all source types.
   - Document supported secret formats for each source type.

5. **Security**
   - Never allow credentials in URLs/specs.
   - Use RBAC to restrict access to secrets.

6. **Testing**
   - Add tests for all source types and authentication flows.

## Out of Scope
- UI changes
- Non-Kubernetes secret management

## Success Criteria
- All module sources (git, http, bucket, oci) can be fetched using credentials from Kubernetes Secrets.
- No credentials are present in URLs/specs or logs.
- Documentation and samples are updated.
