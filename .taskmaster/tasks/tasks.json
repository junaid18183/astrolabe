{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Update Module CRD to Support New Source Types and Secret References",
        "description": "Extend the Module CustomResourceDefinition (CRD) to add 'bucket' and 'ociRepository' as valid source types and introduce a 'secretRef' field under 'source' for all types.",
        "details": "Modify the CRD schema to include 'bucket' and 'ociRepository' in the enum for source.type. Add 'secretRef' as an optional string field under 'source' for all types. Update OpenAPI validation and descriptions to document the new fields and their usage. Ensure backward compatibility for existing types.",
        "testStrategy": "Validate CRD changes by applying the updated CRD and creating Module resources with all supported source types and secretRef fields. Use kubectl and CRD validation tools to ensure correct schema enforcement.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Implement Secret Reference Parsing in Controller",
        "description": "Update the Module Operator controller logic to detect and parse the 'secretRef' field for all source types during reconciliation.",
        "details": "In the controller's reconcile loop, extract the 'secretRef' value from the Module spec. Ensure that the controller can handle cases where 'secretRef' is missing (for public sources) and properly fetch the referenced Secret when present. Use the Kubernetes API client to retrieve Secret objects by name and namespace.",
        "testStrategy": "Unit test the parsing logic with Module specs containing various combinations of source types and secretRef values. Mock Kubernetes API calls to verify correct Secret retrieval.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Integrate Secret-Based Authentication for Git and HTTP Sources",
        "description": "Refactor the source fetching logic for 'git' and 'http(s)' sources to use credentials from the referenced Kubernetes Secret instead of embedded credentials.",
        "details": "For 'git' sources, support SSH keys and basic auth tokens stored in Secrets. For 'http(s)', support basic auth and bearer tokens. Implement logic to extract credentials from Secret data (e.g., username, password, ssh-privatekey) and inject them into the fetch process. Ensure no credentials are logged or exposed.",
        "testStrategy": "Integration tests with private git and http sources using various Secret types (kubernetes.io/basic-auth, Opaque). Verify successful fetch and absence of credentials in logs.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Add Support for Bucket Source Type with Secret-Based Authentication",
        "description": "Implement fetching modules from 'bucket' sources (S3, GCS, Azure Blob) using credentials from the referenced Secret.",
        "details": "Detect 'bucket' source type and provider. Use cloud SDKs (e.g., AWS SDK, Google Cloud SDK, Azure SDK) and inject credentials from Secret data (e.g., accessKey, secretKey, serviceAccountKey). Handle provider-specific authentication flows. Ensure credentials are never logged.",
        "testStrategy": "Integration tests with S3, GCS, and Azure Blob buckets using Secrets for authentication. Validate fetch success and credential confidentiality.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Add Support for OCIRepository Source Type with Secret-Based Authentication",
        "description": "Implement fetching modules from OCI-compliant registries using credentials from the referenced Secret.",
        "details": "Detect 'ociRepository' source type. Use OCI registry client libraries and inject credentials (e.g., registry token, username/password) from Secret data. Support both public and private registries. Ensure credentials are handled securely.",
        "testStrategy": "Integration tests with private OCI registries using Secrets for authentication. Confirm successful fetch and no credential leakage.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Enforce Credential-Free URLs and Specs",
        "description": "Implement validation to ensure no credentials are present in URLs or Module specs.",
        "details": "Add pre-reconciliation validation logic to scan source URLs and spec fields for embedded credentials (e.g., user:pass@host). Reject or warn on invalid specs. Update documentation to clarify this policy.",
        "testStrategy": "Unit tests with Module specs containing credentialed URLs. Verify that such specs are rejected or flagged.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Artifact Management and Status Updates",
        "description": "Store fetched module content in a local artifact directory and update Module status with artifact information and observed revision.",
        "details": "After successful fetch, write module content to a designated artifact directory. Compute a content hash or revision identifier. Update the Module resource's status subresource with artifact path and revision. Ensure atomic updates and error handling.",
        "testStrategy": "Integration tests verifying artifact storage, correct status updates, and handling of fetch failures.",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Update RBAC to Restrict Secret Access",
        "description": "Review and update the operator's RBAC policies to ensure it can only access Secrets referenced by Modules in its namespace.",
        "details": "Modify ClusterRole/Role and RoleBinding/ClusterRoleBinding to grant get/list/watch permissions only for Secrets referenced by Module resources. Use least privilege principles. Document RBAC requirements.",
        "testStrategy": "RBAC policy tests using Kubernetes RBAC tools. Attempt unauthorized Secret access and verify denial.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Update Documentation and Sample YAMLs",
        "description": "Revise CRD documentation and provide sample YAMLs demonstrating secretRef usage for all source types and supported Secret formats.",
        "details": "Update CRD comments, README, and user guides to document secretRef patterns. Provide example Module specs and Secret manifests for git, http, bucket, and ociRepository sources. Document supported Secret types (e.g., kubernetes.io/basic-auth, Opaque) and required keys.",
        "testStrategy": "Documentation review and validation by creating resources from samples. Peer review for clarity and completeness.",
        "priority": "medium",
        "dependencies": [
          1,
          3,
          4,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Comprehensive Testing of Authentication Flows",
        "description": "Add and execute tests for all supported source types and authentication flows, including error cases and edge conditions.",
        "details": "Develop unit, integration, and end-to-end tests covering all source types, Secret formats, and authentication scenarios. Include tests for missing/invalid secrets, credential-free public sources, and RBAC enforcement. Automate test execution in CI pipeline.",
        "testStrategy": "Run automated test suite and validate coverage. Manual testing for complex scenarios. Ensure all success criteria are met.",
        "priority": "high",
        "dependencies": [
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-25T06:12:49.061Z",
      "updated": "2025-07-25T06:12:49.061Z",
      "description": "Tasks for master context"
    }
  }
}